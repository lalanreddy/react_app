{"version":3,"sources":["components/layout/Header.js","components/Todoitem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","linkStyle","textDecoration","Header","style","to","Todoitem","getStyle","borderBottom","props","todo","completed","this","id","title","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","border","borderRadius","cursor","float","Todos","todos","map","key","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","display","flex","placeholder","className","About","Fragment","class","App","axios","delete","then","res","filter","post","data","uuid","v4","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3d3c58dd.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n//import { Link } from 'react-router-dom/cjs/react-router-dom.min';\r\nfunction Header(){\r\n    return(\r\n        <header style={headerStyle}>\r\n            <h1>TodoList</h1>\r\n            <Link style={linkStyle} to=\"/\">Home</Link>|<Link style={linkStyle} to=\"/about\">About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle={\r\n    background:'#333',\r\n    color:'#fff',\r\n    textAlign:'center',\r\n    padding:'10px'\r\n}\r\nconst linkStyle={\r\n    color:'#fff',\r\n    textDecoration:'none',\r\n}\r\nexport default Header ;\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nexport class Todoitem extends Component {\r\n    getStyle = () =>{\r\n        return{\r\n            background:'#f4f4f4',\r\n            padding:'10px',\r\n            borderBottom:'1px #ccc dotted',\r\n            textDecoration:this.props.todo.completed?\r\n            'line-through':'none'\r\n        }\r\n    }\r\n    render() {\r\n        const{id,title }= this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this,id)}/>{''}\r\n                    {title}\r\n                    <button onClick={this.props.delTodo.bind(this,id)} style={btnStyle}>x</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//proptypes\r\nTodoitem.propTypes={\r\n    todo:PropTypes.object.isRequired,\r\n    markComplete:PropTypes.func.isRequired,\r\n    delTodo:PropTypes.func.isRequired,\r\n}\r\nconst btnStyle={\r\n    background:'#ff0000',\r\n    color:'#fff',\r\n    border:'none',\r\n    padding:'5px 9px',\r\n    borderRadius:'50%',\r\n    cursor:'pointer',\r\n    float:'right'\r\n\r\n}\r\nexport default Todoitem\r\n","import React, { Component } from 'react';\r\nimport Todoitem from './Todoitem';\r\nimport PropTypes from 'prop-types';\r\nclass Todos extends Component{\r\n  render(){\r\n  return this.props.todos.map((todo)=>(\r\n     <Todoitem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo}/>\r\n\r\n  ));\r\n}\r\n}\r\n//proptypes\r\nTodos.propTypes={\r\n    todos:PropTypes.array.isRequired,\r\n    markComplete:PropTypes.func.isRequired,\r\n    delTodo:PropTypes.func.isRequired,\r\n}\r\nexport default Todos;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport class AddTodo extends Component {\r\n    state={\r\n        title:''\r\n    }\r\n    onSubmit=(e)=>{\r\n        e.preventDefault()\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title:''});    \r\n        \r\n    }\r\n    onChange =(e)=>this.setState({[e.target.name]: e.target.value});\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit}style={{display:'flex'}}>\r\n                <input type=\"text\" \r\n                name=\"title\"\r\n                style ={{flex:'10',padding:'5px'}}\r\n                placeholder=\"Add Todo ...\"\r\n                value={this.state.title}\r\n                onChange={this.onChange}\r\n                />\r\n                <input type=\"submit\" \r\n                value=\"submit\" \r\n                className=\"btn\" \r\n                style={{flex:'1'}}/>\r\n\r\n            </form>\r\n        )\r\n    }\r\n}\r\n// PropTypes\r\nAddTodo.propTypes = {\r\n    addTodo: PropTypes.func.isRequired\r\n  }\r\n  \r\n\r\nexport default AddTodo\r\n","import React from 'react'\r\nfunction About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1 class=\"center\">About</h1>\r\n            <p class=\"center\">This is Todo list app V1.0.0. It is part of a React crash course</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default About;","import React, { Component } from 'react';\nimport { BrowserRouter as Router,Route } from \"react-router-dom\";\nimport Header from './components/layout/Header';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\nimport uuid from 'uuid';\nimport axios from 'axios';\nimport './App.css';\nclass App extends Component{\n  state ={\n    todos:[]\n  }\n  componentDidMount(){\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n    .then(res => this.setState({ todos: res.data }));\n  }\n  //Toggle complete\n  markComplete =(id)=>{\n    this.setState({todos: this.state.todos.map(todo=>{\n      if(todo.id===id){\n        todo.completed = !todo.completed\n      }\n      return todo;\n    }) });\n  }\n   // Delete Todo\n   delTodo = id => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`).then(res =>\n      this.setState({\n        todos: [...this.state.todos.filter(todo => todo.id !== id)]\n      })\n    );\n  };\n\n  // Add Todo\n  addTodo = title => {\n    axios\n      .post('https://jsonplaceholder.typicode.com/todos', {\n        title,\n        completed: false\n      })\n      .then(res => {\n        res.data.id = uuid.v4();\n        this.setState({ todos: [...this.state.todos, res.data] });\n      });\n  };\n  render(){\n  return (\n    <Router>\n    <div className=\"App\">\n      <div className=\"container\">\n        <Header />\n        <Route exact path=\"/\" render={props => (\n            <React.Fragment>\n              <AddTodo addTodo={this.addTodo} />\n              <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo}/>\n            </React.Fragment>\n          )} />\n        <Route path=\"/about\" component={About} />\n      </div>\n    </div>\n  </Router>\n     \n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}